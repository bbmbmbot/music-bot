import os
import re
import yt_dlp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–æ FFmpeg (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é)
ffmpeg_path = r"C:\FFmpeg\ffmpeg-7.1.1-essentials_build\bin"
os.environ["PATH"] += os.pathsep + ffmpeg_path

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ
BOT_TOKEN = '7820967332:AAFfKslQRCAKuD-12zxu6OfZdxaEsvPWElE'

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üéµ –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é", callback_data='find_song')],
    [InlineKeyboardButton("üî• –•–∏—Ç—ã", callback_data='popular')],
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –∏–ª–∏ –ø–æ—Å–ª—É—à–∞—Ç—å —Ö–∏—Ç—ã.",
        reply_markup=menu_keyboard
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–Ω–∏
async def send_song(query: str, message, context):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'song_%(id)s.%(ext)s',
        'noplaylist': True,
        'quiet': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    search_queries = [f"ytsearch:{query}", f"scsearch:{query}"]
    for search_query in search_queries:
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(search_query, download=True)
                if 'entries' in info and info['entries']:
                    info = info['entries'][0]

                filename = ydl.prepare_filename(info)
                mp3_filename = os.path.splitext(filename)[0] + '.mp3'

                title = info.get('title', 'Unknown title')
                artist = info.get('artist') or info.get('uploader') or 'Unknown artist'
                thumbnail = info.get('thumbnail')

                clean_title = re.sub(r'[\\/:"*?<>|]+', '', title)
                clean_artist = re.sub(r'[\\/:"*?<>|]+', '', artist)
                new_filename = f"{clean_artist} ‚Äî {clean_title}.mp3"
                os.rename(mp3_filename, new_filename)

                if thumbnail:
                    await message.reply_photo(photo=thumbnail)

                with open(new_filename, 'rb') as audio:
                    await message.reply_audio(audio=audio, title=title, performer=artist)

                os.remove(new_filename)
                await message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è –ø–µ—Å–Ω—è üé∂")
                return
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ {search_query}]: {e}")

    await message.reply_text("‚ùå –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ YouTube, –Ω–∏ –Ω–∞ SoundCloud.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'find_song':
        context.user_data['awaiting_query'] = True
        await query.message.reply_text("üéß –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Å–Ω–∏.")
    elif query.data == 'popular':
        await send_song("—Ç–æ–ø —Ö–∏—Ç—ã", query.message, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_query'):
        query_text = update.message.text
        context.user_data['awaiting_query'] = False
        msg = await update.message.reply_text(f"üîç –ò—â—É: {query_text} ...")

        try:
            await send_song(query_text, update.message, context)
            await msg.delete()
        except Exception as e:
            await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ üëá", reply_markup=menu_keyboard)

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
